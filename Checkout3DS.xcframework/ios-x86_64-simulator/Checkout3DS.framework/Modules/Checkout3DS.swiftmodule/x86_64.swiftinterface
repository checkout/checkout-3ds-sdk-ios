// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.5.1 (swiftlang-1300.0.31.4 clang-1300.0.29.6)
// swift-module-flags: -target x86_64-apple-ios11.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name Checkout3DS
import AdSupport
import AppTrackingTransparency
@_exported import Checkout3DS
import CheckoutEventLoggerKit
import CommonCrypto
import Foundation
import JOSESwift
import MobileCoreServices
import Swift
import UIKit
import WebKit
import _Concurrency
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc final public class Checkout3DSService : ObjectiveC.NSObject {
  @available(swift, obsoleted: 1.0)
  @objc convenience override dynamic public init()
  @objc convenience public init(environment: Checkout3DS.Environment = .production, locale: Foundation.Locale = .autoupdatingCurrent, uiCustomization: Checkout3DS.UICustomization = DefaultUICustomization(), appURL: Foundation.URL? = nil)
  @available(swift, obsoleted: 1.0)
  @objc final public func authenticate(authenticationParameters: Checkout3DS.AuthenticationParameters, completionHandler: @escaping (_ error: Swift.Error?) -> Swift.Void)
  final public func authenticate(authenticationParameters: Checkout3DS.AuthenticationParameters, completionHandler: @escaping (_ error: Checkout3DS.AuthenticationError?) -> Swift.Void)
  @objc public static func handleAppURL(url: Foundation.URL) -> Swift.Bool
  @available(swift, obsoleted: 1.0)
  @objc final public func getWarnings() -> Foundation.NSSet
  final public func getWarnings() -> Swift.Set<Checkout3DS.Warning>
  @objc final public func cleanup()
  @objc deinit
}
@objc(Checkout3DSAuthenticationParameters) final public class AuthenticationParameters : ObjectiveC.NSObject {
  @objc final public let sessionID: Swift.String
  @objc final public let sessionSecret: Swift.String
  @objc final public let scheme: Swift.String
  @objc public init(sessionID: Swift.String, sessionSecret: Swift.String, scheme: Swift.String)
  @objc deinit
}
@objc(Checkout3DSButtonCustomizations) public protocol ButtonCustomizations {
  @objc var verifyButtonCustomization: Checkout3DS.ButtonCustomization { get }
  @objc var continueFlowButtonCustomization: Checkout3DS.ButtonCustomization { get }
  @objc var nextButtonCustomization: Checkout3DS.ButtonCustomization { get }
  @objc var cancelButtonCustomization: Checkout3DS.ButtonCustomization { get }
  @objc var resendButtonCustomization: Checkout3DS.ButtonCustomization { get }
}
@_inheritsConvenienceInitializers @objc(Checkout3DSDefaultButtonCustomizations) final public class DefaultButtonCustomizations : ObjectiveC.NSObject, Checkout3DS.ButtonCustomizations {
  @objc final public let verifyButtonCustomization: Checkout3DS.ButtonCustomization
  @objc final public let continueFlowButtonCustomization: Checkout3DS.ButtonCustomization
  @objc final public let nextButtonCustomization: Checkout3DS.ButtonCustomization
  @objc final public let cancelButtonCustomization: Checkout3DS.ButtonCustomization
  @objc final public let resendButtonCustomization: Checkout3DS.ButtonCustomization
  @available(swift, obsoleted: 1.0)
  @objc convenience override dynamic public init()
  @objc public init(verifyButtonCustomization: Checkout3DS.ButtonCustomization = DefaultVerifyButtonCustomization(), continueFlowButtonCustomization: Checkout3DS.ButtonCustomization = DefaultContinueButtonCustomization(), nextButtonCustomization: Checkout3DS.ButtonCustomization = DefaultNextButtonCustomization(), cancelButtonCustomization: Checkout3DS.ButtonCustomization = DefaultCancelButtonCustomization(), resendButtonCustomization: Checkout3DS.ButtonCustomization = DefaultResendButtonCustomization())
  @objc deinit
}
@objc(Checkout3DSUICustomization) public protocol UICustomization {
  @objc var toolbarCustomization: Checkout3DS.ToolbarCustomization { get }
  @objc var labelCustomization: Checkout3DS.LabelCustomization { get }
  @objc var entrySelectionCustomization: Checkout3DS.EntrySelectionCustomization { get }
  @objc var buttonCustomizations: Checkout3DS.ButtonCustomizations { get }
  @objc var footerCustomization: Checkout3DS.FooterCustomization { get }
  @objc var whitelistCustomization: Checkout3DS.WhitelistCustomization { get }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(Checkout3DSDefaultUICustomization) final public class DefaultUICustomization : ObjectiveC.NSObject, Checkout3DS.UICustomization {
  @objc final public let toolbarCustomization: Checkout3DS.ToolbarCustomization
  @objc final public let labelCustomization: Checkout3DS.LabelCustomization
  @objc final public let entrySelectionCustomization: Checkout3DS.EntrySelectionCustomization
  @objc final public let buttonCustomizations: Checkout3DS.ButtonCustomizations
  @objc final public var footerCustomization: Checkout3DS.FooterCustomization
  @objc final public var whitelistCustomization: Checkout3DS.WhitelistCustomization
  @available(swift, obsoleted: 1.0)
  @objc convenience override dynamic public init()
  @objc public init(toolbarCustomization: Checkout3DS.ToolbarCustomization = DefaultToolbarCustomization(), labelCustomization: Checkout3DS.LabelCustomization = DefaultLabelCustomization(), entrySelectionCustomization: Checkout3DS.EntrySelectionCustomization = DefaultEntrySelectionCustomization(), buttonCustomizations: Checkout3DS.ButtonCustomizations = DefaultButtonCustomizations(), footerCustomization: Checkout3DS.FooterCustomization = DefaultFooterCustomization(), whitelistCustomization: Checkout3DS.WhitelistCustomization = DefaultWhitelistCustomization())
  @objc deinit
}
@objc(Checkout3DSEnvironment) public enum Environment : Swift.Int, Swift.Equatable, Swift.CaseIterable {
  case sandbox
  case production
  public init?(rawValue: Swift.Int)
  public typealias AllCases = [Checkout3DS.Environment]
  public typealias RawValue = Swift.Int
  public static var allCases: [Checkout3DS.Environment] {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
@objc(Checkout3DSButtonCustomization) public protocol ButtonCustomization : Checkout3DS.Customization {
  @objc var backgroundColor: UIKit.UIColor { get }
  @objc var cornerRadius: CoreGraphics.CGFloat { get }
  @objc var cornerCurve: QuartzCore.CALayerCornerCurve? { get }
  @objc var borderWidth: CoreGraphics.CGFloat { get }
  @objc var borderColor: CoreGraphics.CGColor? { get }
  @objc var shadowColor: CoreGraphics.CGColor? { get }
  @objc var shadowOffset: CoreGraphics.CGSize { get }
  @objc var shadowRadius: CoreGraphics.CGFloat { get }
  @objc var shadowOpacity: Swift.Float { get }
}
@objc(Checkout3DSDefaultButtonCustomization) final public class DefaultButtonCustomization : ObjectiveC.NSObject, Checkout3DS.ButtonCustomization {
  @objc final public let backgroundColor: UIKit.UIColor
  @objc final public let cornerRadius: CoreGraphics.CGFloat
  @objc final public let cornerCurve: QuartzCore.CALayerCornerCurve?
  @objc final public let font: UIKit.UIFont
  @objc final public let textColor: UIKit.UIColor
  @objc final public let borderWidth: CoreGraphics.CGFloat
  @objc final public let borderColor: CoreGraphics.CGColor?
  @objc final public let shadowColor: CoreGraphics.CGColor?
  @objc final public let shadowOffset: CoreGraphics.CGSize
  @objc final public let shadowRadius: CoreGraphics.CGFloat
  @objc final public let shadowOpacity: Swift.Float
  @objc public init(backgroundColor: UIKit.UIColor, cornerRadius: CoreGraphics.CGFloat, cornerCurve: QuartzCore.CALayerCornerCurve?, font: UIKit.UIFont, textColor: UIKit.UIColor, borderWidth: CoreGraphics.CGFloat, borderColor: CoreGraphics.CGColor?, shadowColor: CoreGraphics.CGColor? = nil, shadowOffset: CoreGraphics.CGSize = .zero, shadowRadius: CoreGraphics.CGFloat = 0, shadowOpacity: Swift.Float = 0)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(Checkout3DSDefaultVerifyButtonCustomization) final public class DefaultVerifyButtonCustomization : ObjectiveC.NSObject, Checkout3DS.ButtonCustomization {
  @objc final public let backgroundColor: UIKit.UIColor
  @objc final public let cornerRadius: CoreGraphics.CGFloat
  @objc final public let cornerCurve: QuartzCore.CALayerCornerCurve?
  @objc final public let font: UIKit.UIFont
  @objc final public let textColor: UIKit.UIColor
  @objc final public let borderWidth: CoreGraphics.CGFloat
  @objc final public let borderColor: CoreGraphics.CGColor?
  @objc final public let shadowColor: CoreGraphics.CGColor?
  @objc final public let shadowOffset: CoreGraphics.CGSize
  @objc final public let shadowRadius: CoreGraphics.CGFloat
  @objc final public let shadowOpacity: Swift.Float
  @available(swift, obsoleted: 1.0)
  @objc convenience override dynamic public init()
  @available(iOS 13.0, *)
  @objc public init(backgroundColor: UIKit.UIColor = .systemBlue, cornerRadius: CoreGraphics.CGFloat = 5, cornerCurve: QuartzCore.CALayerCornerCurve = .continuous, font: UIKit.UIFont = .preferredFont(forTextStyle: .body), textColor: UIKit.UIColor = .white, borderWidth: CoreGraphics.CGFloat = 0, borderColor: CoreGraphics.CGColor? = nil, shadowColor: CoreGraphics.CGColor? = nil, shadowOffset: CoreGraphics.CGSize = .zero, shadowRadius: CoreGraphics.CGFloat = 0, shadowOpacity: Swift.Float = 0)
  @objc public init(backgroundColor: UIKit.UIColor = .systemBlue, cornerRadius: CoreGraphics.CGFloat = 5, font: UIKit.UIFont = .preferredFont(forTextStyle: .body), textColor: UIKit.UIColor = .white, borderWidth: CoreGraphics.CGFloat = 0, borderColor: CoreGraphics.CGColor? = nil, shadowColor: CoreGraphics.CGColor? = nil, shadowOffset: CoreGraphics.CGSize = .zero, shadowRadius: CoreGraphics.CGFloat = 0, shadowOpacity: Swift.Float = 0)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(Checkout3DSDefaultContinueButtonCustomization) final public class DefaultContinueButtonCustomization : ObjectiveC.NSObject, Checkout3DS.ButtonCustomization {
  @objc final public let backgroundColor: UIKit.UIColor
  @objc final public let cornerRadius: CoreGraphics.CGFloat
  @objc final public let cornerCurve: QuartzCore.CALayerCornerCurve?
  @objc final public let font: UIKit.UIFont
  @objc final public let textColor: UIKit.UIColor
  @objc final public let borderWidth: CoreGraphics.CGFloat
  @objc final public let borderColor: CoreGraphics.CGColor?
  @objc final public let shadowColor: CoreGraphics.CGColor?
  @objc final public let shadowOffset: CoreGraphics.CGSize
  @objc final public let shadowRadius: CoreGraphics.CGFloat
  @objc final public let shadowOpacity: Swift.Float
  @available(swift, obsoleted: 1.0)
  @objc convenience override dynamic public init()
  @available(iOS 13.0, *)
  @objc public init(backgroundColor: UIKit.UIColor = .systemBlue, cornerRadius: CoreGraphics.CGFloat = 5, cornerCurve: QuartzCore.CALayerCornerCurve = .continuous, font: UIKit.UIFont = .preferredFont(forTextStyle: .body), textColor: UIKit.UIColor = .white, borderWidth: CoreGraphics.CGFloat = 2, borderColor: CoreGraphics.CGColor? = UIColor.systemBlue.cgColor, shadowColor: CoreGraphics.CGColor? = nil, shadowOffset: CoreGraphics.CGSize = .zero, shadowRadius: CoreGraphics.CGFloat = 0, shadowOpacity: Swift.Float = 0)
  @objc public init(backgroundColor: UIKit.UIColor = .systemBlue, cornerRadius: CoreGraphics.CGFloat = 5, font: UIKit.UIFont = .preferredFont(forTextStyle: .body), textColor: UIKit.UIColor = .white, borderWidth: CoreGraphics.CGFloat = 2, borderColor: CoreGraphics.CGColor? = UIColor.systemBlue.cgColor, shadowColor: CoreGraphics.CGColor? = nil, shadowOffset: CoreGraphics.CGSize = .zero, shadowRadius: CoreGraphics.CGFloat = 0, shadowOpacity: Swift.Float = 0)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(Checkout3DSDefaultNextButtonCustomization) final public class DefaultNextButtonCustomization : ObjectiveC.NSObject, Checkout3DS.ButtonCustomization {
  @objc final public let backgroundColor: UIKit.UIColor
  @objc final public let cornerRadius: CoreGraphics.CGFloat
  @objc final public let cornerCurve: QuartzCore.CALayerCornerCurve?
  @objc final public let font: UIKit.UIFont
  @objc final public let textColor: UIKit.UIColor
  @objc final public let borderWidth: CoreGraphics.CGFloat
  @objc final public let borderColor: CoreGraphics.CGColor?
  @objc final public let shadowColor: CoreGraphics.CGColor?
  @objc final public let shadowOffset: CoreGraphics.CGSize
  @objc final public let shadowRadius: CoreGraphics.CGFloat
  @objc final public let shadowOpacity: Swift.Float
  @available(swift, obsoleted: 1.0)
  @objc convenience override dynamic public init()
  @available(iOS 13.0, *)
  @objc public init(backgroundColor: UIKit.UIColor = .systemBlue, cornerRadius: CoreGraphics.CGFloat = 5, cornerCurve: QuartzCore.CALayerCornerCurve = .continuous, font: UIKit.UIFont = .preferredFont(forTextStyle: .body), textColor: UIKit.UIColor = .white, borderWidth: CoreGraphics.CGFloat = 0, borderColor: CoreGraphics.CGColor? = nil, shadowColor: CoreGraphics.CGColor? = nil, shadowOffset: CoreGraphics.CGSize = .zero, shadowRadius: CoreGraphics.CGFloat = 0, shadowOpacity: Swift.Float = 0)
  @objc public init(backgroundColor: UIKit.UIColor = .systemBlue, cornerRadius: CoreGraphics.CGFloat = 5, font: UIKit.UIFont = .preferredFont(forTextStyle: .body), textColor: UIKit.UIColor = .white, borderWidth: CoreGraphics.CGFloat = 0, borderColor: CoreGraphics.CGColor? = nil, shadowColor: CoreGraphics.CGColor? = nil, shadowOffset: CoreGraphics.CGSize = .zero, shadowRadius: CoreGraphics.CGFloat = 0, shadowOpacity: Swift.Float = 0)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(Checkout3DSDefaultResendButtonCustomization) final public class DefaultResendButtonCustomization : ObjectiveC.NSObject, Checkout3DS.ButtonCustomization {
  @objc final public let backgroundColor: UIKit.UIColor
  @objc final public let cornerRadius: CoreGraphics.CGFloat
  @objc final public let cornerCurve: QuartzCore.CALayerCornerCurve?
  @objc final public let font: UIKit.UIFont
  @objc final public let textColor: UIKit.UIColor
  @objc final public let borderWidth: CoreGraphics.CGFloat
  @objc final public let borderColor: CoreGraphics.CGColor?
  @objc final public let shadowColor: CoreGraphics.CGColor?
  @objc final public let shadowOffset: CoreGraphics.CGSize
  @objc final public let shadowRadius: CoreGraphics.CGFloat
  @objc final public let shadowOpacity: Swift.Float
  @available(swift, obsoleted: 1.0)
  @objc convenience override dynamic public init()
  @available(iOS 13.0, *)
  @objc public init(backgroundColor: UIKit.UIColor = .white, cornerRadius: CoreGraphics.CGFloat = 5, cornerCurve: QuartzCore.CALayerCornerCurve = .continuous, font: UIKit.UIFont = .preferredFont(forTextStyle: .body), textColor: UIKit.UIColor = .systemBlue, borderWidth: CoreGraphics.CGFloat = 2, borderColor: CoreGraphics.CGColor? = UIColor.systemBlue.cgColor, shadowColor: CoreGraphics.CGColor? = nil, shadowOffset: CoreGraphics.CGSize = .zero, shadowRadius: CoreGraphics.CGFloat = 0, shadowOpacity: Swift.Float = 0)
  @objc public init(backgroundColor: UIKit.UIColor = .white, cornerRadius: CoreGraphics.CGFloat = 5, font: UIKit.UIFont = .preferredFont(forTextStyle: .body), textColor: UIKit.UIColor = .systemBlue, borderWidth: CoreGraphics.CGFloat = 2, borderColor: CoreGraphics.CGColor? = UIColor.systemBlue.cgColor, shadowColor: CoreGraphics.CGColor? = nil, shadowOffset: CoreGraphics.CGSize = .zero, shadowRadius: CoreGraphics.CGFloat = 0, shadowOpacity: Swift.Float = 0)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(Checkout3DSDefaultCancelButtonCustomization) final public class DefaultCancelButtonCustomization : ObjectiveC.NSObject, Checkout3DS.ButtonCustomization {
  @objc final public let text: Swift.String
  @objc final public let backgroundColor: UIKit.UIColor
  @objc final public let cornerRadius: CoreGraphics.CGFloat
  @objc final public let cornerCurve: QuartzCore.CALayerCornerCurve?
  @objc final public let font: UIKit.UIFont
  @objc final public let textColor: UIKit.UIColor
  @objc final public let borderWidth: CoreGraphics.CGFloat
  @objc final public let borderColor: CoreGraphics.CGColor?
  @objc final public let shadowColor: CoreGraphics.CGColor?
  @objc final public let shadowOffset: CoreGraphics.CGSize
  @objc final public let shadowRadius: CoreGraphics.CGFloat
  @objc final public let shadowOpacity: Swift.Float
  @available(swift, obsoleted: 1.0)
  @objc convenience override dynamic public init()
  @available(iOS 13.0, *)
  @objc public init(text: Swift.String = "Cancel", backgroundColor: UIKit.UIColor = .white, cornerRadius: CoreGraphics.CGFloat = 5, cornerCurve: QuartzCore.CALayerCornerCurve = .continuous, font: UIKit.UIFont = .preferredFont(forTextStyle: .body), textColor: UIKit.UIColor = .systemBlue, borderWidth: CoreGraphics.CGFloat = 0, borderColor: CoreGraphics.CGColor? = nil, shadowColor: CoreGraphics.CGColor? = nil, shadowOffset: CoreGraphics.CGSize = .zero, shadowRadius: CoreGraphics.CGFloat = 0, shadowOpacity: Swift.Float = 0)
  @objc public init(text: Swift.String = "Cancel", backgroundColor: UIKit.UIColor = .white, cornerRadius: CoreGraphics.CGFloat = 5, font: UIKit.UIFont = .preferredFont(forTextStyle: .body), textColor: UIKit.UIColor = .systemBlue, borderWidth: CoreGraphics.CGFloat = 0, borderColor: CoreGraphics.CGColor? = nil, shadowColor: CoreGraphics.CGColor? = nil, shadowOffset: CoreGraphics.CGSize = .zero, shadowRadius: CoreGraphics.CGFloat = 0, shadowOpacity: Swift.Float = 0)
  @objc deinit
}
@objc(Checkout3DSAuthenticationError) public enum AuthenticationError : Swift.Int, Swift.Error, Swift.Equatable, Swift.CaseIterable {
  case invalidSessionID = 1000
  case unauthorizedSessionsRequest = 1001
  case challengeCancelled = 1002
  case challengeTimeout = 1003
  case authenticationVerificationUnsuccessful = 1004
  case duplicateAuthenticationRequest = 1006
  case concurrentAuthenticationRequest = 1007
  case sdkPListModified = 1008
  case certificateTransparencyOverriddenByApp = 1009
  case noInternetConnectivity = 2000
  case connectionFailed = 2001
  case connectionTimeout = 2002
  case connectionLost = 2003
  case internationalRoamingOff = 2004
  case unknownNetworkError = 2005
  case certificateTransparencyChecksFailed = 2006
  case threeDS2ProtocolError3010 = 3010
  case threeDS2ProtocolError3011 = 3011
  case threeDS2ProtocolError3012 = 3012
  case threeDS2ProtocolError3013 = 3013
  case threeDS2ProtocolError3101 = 3101
  case threeDS2ProtocolError3102 = 3102
  case threeDS2ProtocolError3201 = 3201
  case threeDS2ProtocolError3202 = 3202
  case threeDS2ProtocolError3203 = 3203
  case threeDS2ProtocolError3204 = 3204
  case threeDS2ProtocolError3302 = 3302
  case threeDS2ProtocolError3303 = 3303
  case threeDS2ProtocolError3304 = 3304
  case threeDS2ProtocolError3305 = 3305
  case threeDS2ProtocolError3306 = 3306
  case threeDS2ProtocolError3307 = 3307
  case threeDS2ProtocolError3308 = 3308
  case threeDS2ProtocolError3402 = 3402
  case threeDS2ProtocolError3500 = 3500
  case threeDS2ProtocolError3501 = 3501
  case threeDS2ProtocolError3505 = 3505
  case threeDS2ProtocolError3514 = 3514
  case threeDS2ProtocolError3515 = 3515
  case threeDS2ProtocolError3523 = 3523
  case threeDS2ProtocolError3524 = 3524
  case threeDS2ProtocolError3525 = 3525
  case threeDS2ProtocolError3526 = 3526
  case threeDS2ProtocolError3527 = 3527
  case threeDS2ProtocolError3528 = 3528
  case threeDS2ProtocolError3529 = 3529
  case threeDS2ProtocolError3530 = 3530
  case threeDS2ProtocolError3533 = 3533
  case threeDS2ProtocolError3534 = 3534
  case threeDS2ProtocolError3536 = 3536
  case threeDS2ProtocolError3537 = 3537
  case threeDS2ProtocolError3538 = 3538
  case threeDS2ProtocolError3540 = 3540
  case threeDS2ProtocolError3541 = 3541
  case threeDS2ProtocolError3542 = 3542
  case threeDS2ProtocolError3543 = 3543
  case threeDS2ProtocolError3544 = 3544
  case threeDS2ProtocolError3545 = 3545
  case threeDS2ProtocolError3546 = 3546
  case threeDS2ProtocolError3547 = 3547
  case threeDS2ProtocolError3548 = 3548
  case threeDS2ProtocolError3549 = 3549
  case threeDS2ProtocolError3550 = 3550
  case threeDS2ProtocolError3551 = 3551
  case threeDS2ProtocolError3552 = 3552
  case threeDS2ProtocolError3553 = 3553
  case threeDS2ProtocolError3554 = 3554
  case threeDS2ProtocolError3555 = 3555
  case threeDS2ProtocolError3556 = 3556
  case threeDS2ProtocolError3557 = 3557
  case threeDS2ProtocolError3558 = 3558
  case threeDS2ProtocolError3559 = 3559
  case threeDS2ProtocolError3560 = 3560
  case threeDS2ProtocolError3561 = 3561
  case threeDS2ProtocolError3562 = 3562
  case threeDS2ProtocolError3563 = 3563
  case internalError4004 = 4004
  case internalError4005 = 4005
  case internalError4018 = 4018
  case internalError4019 = 4019
  case internalError4020 = 4020
  case internalError4023 = 4023
  case internalError4024 = 4024
  case internalError4025 = 4025
  case internalError4026 = 4026
  case internalError4027 = 4027
  case internalError4028 = 4028
  case internalError4030 = 4030
  case internalError4031 = 4031
  case internalError4032 = 4032
  case internalError4034 = 4034
  case internalError4035 = 4035
  case internalError4036 = 4036
  case internalError4037 = 4037
  case internalError4038 = 4038
  case internalError4039 = 4039
  case internalError4040 = 4040
  case internalError4042 = 4042
  case internalError4043 = 4043
  case internalError4044 = 4044
  case internalError4045 = 4045
  case internalError4048 = 4048
  case internalError4049 = 4049
  case internalError4050 = 4050
  case internalError4051 = 4051
  case internalError4052 = 4052
  case internalError4053 = 4053
  case internalError4054 = 4054
  case threeDS1ProtocolError5001 = 5001
  case threeDS1ProtocolError5002 = 5002
  case threeDS1ProtocolError5003 = 5003
  case threeDS1ProtocolError5004 = 5004
  case threeDS1ProtocolError5006 = 5006
  case threeDS1ProtocolError5007 = 5007
  case threeDS1ProtocolError5008 = 5008
  case threeDS1ProtocolError5500 = 5500
  public init?(rawValue: Swift.Int)
  public typealias AllCases = [Checkout3DS.AuthenticationError]
  public typealias RawValue = Swift.Int
  public static var _nsErrorDomain: Swift.String {
    get
  }
  public static var allCases: [Checkout3DS.AuthenticationError] {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
@objc(Checkout3DSCustomization) public protocol Customization {
  @objc var font: UIKit.UIFont { get }
  @objc var textColor: UIKit.UIColor { get }
}
@objc(Checkout3DSDefaultFooterCustomization) public protocol FooterCustomization : Checkout3DS.Customization {
  @objc var backgroundColor: UIKit.UIColor { get }
  @objc var labelFont: UIKit.UIFont { get }
  @objc var labelTextColor: UIKit.UIColor { get }
  @objc var expandIndicatorColor: UIKit.UIColor { get }
}
@_inheritsConvenienceInitializers @objc(Checkout3DSDefaultFooterCustomization) final public class DefaultFooterCustomization : ObjectiveC.NSObject, Checkout3DS.FooterCustomization {
  @objc final public let backgroundColor: UIKit.UIColor
  @objc final public let font: UIKit.UIFont
  @objc final public let textColor: UIKit.UIColor
  @objc final public let labelFont: UIKit.UIFont
  @objc final public let labelTextColor: UIKit.UIColor
  @objc final public let expandIndicatorColor: UIKit.UIColor
  @available(swift, obsoleted: 1.0)
  @objc convenience override dynamic public init()
  @objc public init(backgroundColor: UIKit.UIColor = .white, font: UIKit.UIFont = .preferredFont(forTextStyle: .subheadline), textColor: UIKit.UIColor = DefaultSystemColor.secondaryLabel, labelFont: UIKit.UIFont = .preferredFont(forTextStyle: .subheadline), labelTextColor: UIKit.UIColor = DefaultSystemColor.label, expandIndicatorColor: UIKit.UIColor = DefaultSystemColor.label)
  @objc deinit
}
@inline(never) public func positiveCallback(jsonPtr: Swift.UnsafePointer<Swift.CChar>)
@inline(never) public func negativeCallback(jsonPtr: Swift.UnsafePointer<Swift.CChar>)
@inline(never) public func probeMethod()
extension Checkout3DS.Warning {
  @objc public enum Severity : Swift.Int {
    case low
    case medium
    case high
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
}
@objc(Checkout3DSToolbarCustomization) public protocol ToolbarCustomization : Checkout3DS.Customization {
  @objc var backgroundColor: UIKit.UIColor { get }
  @objc var headerTitle: Swift.String? { get }
  @objc var buttonTitle: Swift.String? { get }
}
@_inheritsConvenienceInitializers @objc(Checkout3DSDefaultToolbarCustomization) final public class DefaultToolbarCustomization : ObjectiveC.NSObject, Checkout3DS.ToolbarCustomization {
  @objc final public let backgroundColor: UIKit.UIColor
  @objc final public let headerTitle: Swift.String?
  @objc final public let buttonTitle: Swift.String?
  @objc final public let font: UIKit.UIFont
  @objc final public let textColor: UIKit.UIColor
  @available(swift, obsoleted: 1.0)
  @objc convenience override dynamic public init()
  @objc public init(backgroundColor: UIKit.UIColor = UIColor(red: 251/255, green: 251/255, blue: 252/255, alpha: 1), headerTitle: Swift.String? = nil, buttonTitle: Swift.String? = nil, font: UIKit.UIFont = .preferredFont(forTextStyle: .headline), textColor: UIKit.UIColor = DefaultSystemColor.label)
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(Checkout3DSDefaultSystemColor) public class DefaultSystemColor : ObjectiveC.NSObject {
  @objc public static var label: UIKit.UIColor {
    @objc get
  }
  @objc public static var secondaryLabel: UIKit.UIColor {
    @objc get
  }
  @objc public static var systemGray6: UIKit.UIColor {
    @objc get
  }
  @objc deinit
}
@objc(Checkout3DSLabelCustomization) public protocol LabelCustomization : Checkout3DS.Customization {
  @objc var headingTextColor: UIKit.UIColor { get }
  @objc var headingFont: UIKit.UIFont { get }
}
@_inheritsConvenienceInitializers @objc(Checkout3DSDefaultLabelCustomization) final public class DefaultLabelCustomization : ObjectiveC.NSObject, Checkout3DS.LabelCustomization {
  @objc final public let headingTextColor: UIKit.UIColor
  @objc final public let headingFont: UIKit.UIFont
  @objc final public let font: UIKit.UIFont
  @objc final public let textColor: UIKit.UIColor
  @available(swift, obsoleted: 1.0)
  @objc convenience override dynamic public init()
  @objc public init(headingTextColor: UIKit.UIColor = DefaultSystemColor.label, headingFont: UIKit.UIFont = .preferredFont(forTextStyle: .headline), font: UIKit.UIFont = .preferredFont(forTextStyle: .body), textColor: UIKit.UIColor = DefaultSystemColor.label)
  @objc deinit
}
extension UIKit.UITextField.BorderStyle : Swift.Codable {
}
extension QuartzCore.CALayerCornerCurve : Swift.Codable {
}
@objc(Checkout3DSWhitelistCustomization) public protocol WhitelistCustomization : Checkout3DS.Customization {
  @objc var switchTintColor: UIKit.UIColor? { get }
}
@_inheritsConvenienceInitializers @objc(Checkout3DSDefaultWhitelistCustomization) final public class DefaultWhitelistCustomization : ObjectiveC.NSObject, Checkout3DS.WhitelistCustomization {
  @objc final public var font: UIKit.UIFont
  @objc final public var textColor: UIKit.UIColor
  @objc final public let switchTintColor: UIKit.UIColor?
  @available(swift, obsoleted: 1.0)
  @objc convenience override dynamic public init()
  @objc public init(font: UIKit.UIFont = .preferredFont(forTextStyle: .subheadline), textColor: UIKit.UIColor = DefaultSystemColor.secondaryLabel, switchTintColor: UIKit.UIColor? = nil)
  @objc deinit
}
@objc(Checkout3DSWarning) public enum Warning : Swift.Int, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable {
  case appURLTooLong
  case appURLFormatInvalid
  case debuggerAttached
  case runningOnSimulator
  case jailbroken
  case integrityTampered
  public var id: Swift.String {
    get
  }
  public var message: Swift.String {
    get
  }
  public var severity: Checkout3DS.Warning.Severity {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias AllCases = [Checkout3DS.Warning]
  public typealias RawValue = Swift.Int
  public static var allCases: [Checkout3DS.Warning] {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
@objc(Checkout3DSEntrySelectionCustomization) public protocol EntrySelectionCustomization : Checkout3DS.Customization {
  @objc var borderWidth: CoreGraphics.CGFloat { get }
  @objc var borderColor: CoreGraphics.CGColor { get }
  @objc var cornerRadius: CoreGraphics.CGFloat { get }
  @objc var cornerCurve: QuartzCore.CALayerCornerCurve? { get }
  @objc var borderStyle: UIKit.UITextField.BorderStyle { get }
  @objc var backgroundColor: UIKit.UIColor { get }
  @objc var unselectedColor: UIKit.UIColor { get }
  @objc var selectedColor: UIKit.UIColor { get }
}
@_inheritsConvenienceInitializers @objc(Checkout3DSDefaultEntrySelectionCustomization) final public class DefaultEntrySelectionCustomization : ObjectiveC.NSObject, Checkout3DS.EntrySelectionCustomization {
  @objc final public let borderWidth: CoreGraphics.CGFloat
  @objc final public let borderColor: CoreGraphics.CGColor
  @objc final public let cornerRadius: CoreGraphics.CGFloat
  @objc final public let cornerCurve: QuartzCore.CALayerCornerCurve?
  @objc final public let font: UIKit.UIFont
  @objc final public let textColor: UIKit.UIColor
  @objc final public let borderStyle: UIKit.UITextField.BorderStyle
  @objc final public let backgroundColor: UIKit.UIColor
  @objc final public let unselectedColor: UIKit.UIColor
  @objc final public let selectedColor: UIKit.UIColor
  @available(swift, obsoleted: 1.0)
  @objc convenience override dynamic public init()
  @available(iOS 13, *)
  @objc public init(borderWidth: CoreGraphics.CGFloat = 1, borderColor: CoreGraphics.CGColor = UIColor.systemGray.cgColor, cornerRadius: CoreGraphics.CGFloat = 5, cornerCurve: QuartzCore.CALayerCornerCurve = .continuous, font: UIKit.UIFont = .preferredFont(forTextStyle: .body), textColor: UIKit.UIColor = .label, borderStyle: UIKit.UITextField.BorderStyle = .roundedRect, backgroundColor: UIKit.UIColor = .white, unselectedColor: UIKit.UIColor = .systemGray, selectedColor: UIKit.UIColor = .systemBlue)
  @available(iOS, introduced: 11, obsoleted: 13)
  @objc public init(borderWidth: CoreGraphics.CGFloat = 1, borderColor: CoreGraphics.CGColor = UIColor.systemGray.cgColor, cornerRadius: CoreGraphics.CGFloat = 5, font: UIKit.UIFont = .preferredFont(forTextStyle: .body), textColor: UIKit.UIColor = DefaultSystemColor.label, borderStyle: UIKit.UITextField.BorderStyle = .roundedRect, backgroundColor: UIKit.UIColor = .white, unselectedColor: UIKit.UIColor = .systemGray, selectedColor: UIKit.UIColor = .systemBlue)
  @objc deinit
}
extension Checkout3DS.Environment : Swift.Hashable {}
extension Checkout3DS.Environment : Swift.RawRepresentable {}
extension Checkout3DS.AuthenticationError : Swift.Hashable {}
extension Checkout3DS.AuthenticationError : Swift.RawRepresentable {}
extension Checkout3DS.Warning : Swift.Hashable {}
extension Checkout3DS.Warning.Severity : Swift.Equatable {}
extension Checkout3DS.Warning.Severity : Swift.Hashable {}
extension Checkout3DS.Warning.Severity : Swift.RawRepresentable {}
