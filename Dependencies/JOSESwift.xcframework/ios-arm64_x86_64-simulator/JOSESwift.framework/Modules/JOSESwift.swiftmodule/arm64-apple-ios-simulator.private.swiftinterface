// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7.1 (swiftlang-5.7.1.135.3 clang-1400.0.29.51)
// swift-module-flags: -target arm64-apple-ios10.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name JOSESwift
// swift-module-flags-ignorable: -enable-bare-slash-regex
import CommonCrypto
import Compression
import Foundation
@_exported import JOSESwift
import LocalAuthentication
import Security
import Swift
import _Concurrency
import _StringProcessing
public struct Encrypter<KeyType> {
  public init?(keyManagementAlgorithm: JOSESwift.KeyManagementAlgorithm, contentEncryptionAlgorithm: JOSESwift.ContentEncryptionAlgorithm, encryptionKey: KeyType)
}
extension JOSESwift.Encrypter {
  @available(*, deprecated, message: "Use `init?(keyManagementAlgorithm:contentEncryptionAlgorithm:encryptionKey:)` instead")
  public init?(keyEncryptionAlgorithm: JOSESwift.AsymmetricKeyAlgorithm, encryptionKey key: KeyType, contentEncyptionAlgorithm: JOSESwift.SymmetricKeyAlgorithm)
  @available(*, deprecated, message: "Use `init?(keyManagementAlgorithm:contentEncryptionAlgorithm:encryptionKey:)` instead")
  public init?(keyEncryptionAlgorithm: JOSESwift.AsymmetricKeyAlgorithm, keyEncryptionKey kek: KeyType, contentEncyptionAlgorithm: JOSESwift.SymmetricKeyAlgorithm)
}
@available(*, deprecated, message: "This type will be removed with the next major release.")
public struct EncryptionContext {
}
@available(*, deprecated, message: "This type will be removed with the next major release.")
public struct SymmetricEncryptionContext {
}
extension JOSESwift.JWK {
  public subscript(parameter: Swift.String) -> Swift.String? {
    get
  }
}
extension JOSESwift.JWK {
  public func jsonString() -> Swift.String?
  public func jsonData() -> Foundation.Data?
}
extension JOSESwift.JWKSet : Swift.Encodable {
  public func encode(to encoder: Swift.Encoder) throws
}
extension JOSESwift.JWKSet : Swift.Decodable {
  public init(from decoder: Swift.Decoder) throws
}
extension Security.SecKey : JOSESwift.ExpressibleAsRSAPublicKeyComponents {
  public static func representing(rsaPublicKeyComponents components: JOSESwift.RSAPublicKeyComponents) throws -> Self
  public func rsaPublicKeyComponents() throws -> JOSESwift.RSAPublicKeyComponents
}
public struct Decrypter {
  public init?<KeyType>(keyManagementAlgorithm: JOSESwift.KeyManagementAlgorithm, contentEncryptionAlgorithm: JOSESwift.ContentEncryptionAlgorithm, decryptionKey: KeyType)
}
extension JOSESwift.Decrypter {
  @available(*, deprecated, message: "Use `init?(keyManagementAlgorithm:contentEncryptionAlgorithm:decryptionKey:)` instead")
  public init?<KeyType>(keyDecryptionAlgorithm: JOSESwift.AsymmetricKeyAlgorithm, decryptionKey key: KeyType, contentDecryptionAlgorithm: JOSESwift.SymmetricKeyAlgorithm)
  @available(*, deprecated, message: "Use `init?(keyManagementAlgorithm:contentEncryptionAlgorithm:decryptionKey:)` instead")
  public init?<KeyType>(keyDecryptionAlgorithm: JOSESwift.AsymmetricKeyAlgorithm, keyDecryptionKey kdk: KeyType, contentDecryptionAlgorithm: JOSESwift.SymmetricKeyAlgorithm)
}
@available(*, deprecated, message: "This type will be removed with the next major release.")
public struct DecryptionContext {
}
@available(*, deprecated, message: "This type will be removed with the next major release.")
public struct SymmetricDecryptionContext {
}
public struct JWKSet {
  public let keys: [JOSESwift.JWK]
  public init(keys: [JOSESwift.JWK])
  public init(data: Foundation.Data) throws
  public func jsonString() -> Swift.String?
  public func jsonData() -> Foundation.Data?
}
extension JOSESwift.JWKSet : Swift.Collection {
  public typealias ArrayType = [JOSESwift.JWK]
  public typealias Element = JOSESwift.JWKSet.ArrayType.Element
  public typealias Index = JOSESwift.JWKSet.ArrayType.Index
  public typealias Iterator = JOSESwift.JWKSet.ArrayType.Iterator
  public var startIndex: JOSESwift.JWKSet.Index {
    get
  }
  public var endIndex: JOSESwift.JWKSet.Index {
    get
  }
  public subscript(index: JOSESwift.JWKSet.Index) -> JOSESwift.JWKSet.Element {
    get
  }
  public func index(after index: JOSESwift.JWKSet.Index) -> JOSESwift.JWKSet.Index
  public func makeIterator() -> Swift.IndexingIterator<JOSESwift.JWKSet.ArrayType>
  public typealias Indices = Swift.DefaultIndices<JOSESwift.JWKSet>
  public typealias SubSequence = Swift.Slice<JOSESwift.JWKSet>
}
extension JOSESwift.JWKSet : Swift.ExpressibleByArrayLiteral {
  public typealias ArrayLiteralElement = JOSESwift.JWKSet.Element
  public init(arrayLiteral elements: JOSESwift.JWKSet.ArrayLiteralElement...)
}
public protocol CompactDeserializable {
  static var componentCount: Swift.Int { get }
  init(from deserializer: JOSESwift.CompactDeserializer) throws
}
public protocol CompactDeserializer {
  func deserialize<T>(_ type: T.Type, at index: Swift.Int) throws -> T where T : JOSESwift.DataConvertible
}
public struct JOSEDeserializer {
  public init()
  public func deserialize<T>(_ type: T.Type, fromCompactSerialization compactSerialization: Swift.String) throws -> T where T : JOSESwift.CompactDeserializable
}
public enum ComponentCompactSerializedIndex {
}
public enum JWKKeyType : Swift.String, Swift.Codable {
  case RSA
  case OCT
  case EC
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public protocol JWK : Swift.Decodable, Swift.Encodable {
  var keyType: JOSESwift.JWKKeyType { get }
  var parameters: [Swift.String : Swift.String] { get }
  var requiredParameters: [Swift.String : Swift.String] { get }
  subscript(parameter: Swift.String) -> Swift.String? { get }
  init(data: Foundation.Data) throws
  func jsonString() -> Swift.String?
  func jsonData() -> Foundation.Data?
  @available(iOS 11.0, *)
  func thumbprint(algorithm: JOSESwift.JWKThumbprintAlgorithm) throws -> Swift.String
  @available(iOS 11.0, *)
  func withThumbprintAsKeyId(algorithm: JOSESwift.JWKThumbprintAlgorithm) throws -> Self
}
extension JOSESwift.JWK {
  @available(iOS 11.0, *)
  public func thumbprint(algorithm: JOSESwift.JWKThumbprintAlgorithm = .SHA256) throws -> Swift.String
}
public enum SecureRandomError : Swift.Error {
  case failed(status: Darwin.OSStatus)
  case countMustBeGreaterThanZero
}
public struct SecureRandom {
  public static func generate(count: Swift.Int) throws -> Foundation.Data
}
public typealias RSAPublicKeyComponents = (modulus: Foundation.Data, exponent: Foundation.Data)
public typealias RSAPrivateKeyComponents = (modulus: Foundation.Data, exponent: Foundation.Data, privateExponent: Foundation.Data)
public protocol ExpressibleAsRSAPublicKeyComponents {
  static func representing(rsaPublicKeyComponents components: JOSESwift.RSAPublicKeyComponents) throws -> Self
  func rsaPublicKeyComponents() throws -> JOSESwift.RSAPublicKeyComponents
}
public protocol ExpressibleAsRSAPrivateKeyComponents {
  static func representing(rsaPrivateKeyComponents components: JOSESwift.RSAPrivateKeyComponents) throws -> Self
  func rsaPrivateKeyComponents() throws -> JOSESwift.RSAPrivateKeyComponents
}
public struct RSAPublicKey : JOSESwift.JWK {
  public let keyType: JOSESwift.JWKKeyType
  public let parameters: [Swift.String : Swift.String]
  public var requiredParameters: [Swift.String : Swift.String] {
    get
  }
  public let modulus: Swift.String
  public let exponent: Swift.String
  public init(modulus: Swift.String, exponent: Swift.String, additionalParameters parameters: [Swift.String : Swift.String] = [:])
  public init(publicKey: JOSESwift.ExpressibleAsRSAPublicKeyComponents, additionalParameters parameters: [Swift.String : Swift.String] = [:]) throws
  public init(data: Foundation.Data) throws
  public func converted<T>(to type: T.Type) throws -> T where T : JOSESwift.ExpressibleAsRSAPublicKeyComponents
  @available(iOS 11.0, *)
  public func withThumbprintAsKeyId(algorithm: JOSESwift.JWKThumbprintAlgorithm = .SHA256) throws -> JOSESwift.RSAPublicKey
}
public struct RSAPrivateKey : JOSESwift.JWK {
  public let keyType: JOSESwift.JWKKeyType
  public let parameters: [Swift.String : Swift.String]
  public var requiredParameters: [Swift.String : Swift.String] {
    get
  }
  public let modulus: Swift.String
  public let exponent: Swift.String
  public let privateExponent: Swift.String
  public init(modulus: Swift.String, exponent: Swift.String, privateExponent: Swift.String, additionalParameters parameters: [Swift.String : Swift.String] = [:])
  public init(privateKey: JOSESwift.ExpressibleAsRSAPrivateKeyComponents, additionalParameters parameters: [Swift.String : Swift.String] = [:]) throws
  public init(data: Foundation.Data) throws
  public func converted<T>(to type: T.Type) throws -> T where T : JOSESwift.ExpressibleAsRSAPrivateKeyComponents
  @available(iOS 11.0, *)
  public func withThumbprintAsKeyId(algorithm: JOSESwift.JWKThumbprintAlgorithm = .SHA256) throws -> JOSESwift.RSAPrivateKey
}
public typealias RSAKeyPair = JOSESwift.RSAPrivateKey
public protocol CompactSerializable {
  func serialize(to serializer: inout JOSESwift.CompactSerializer)
}
public protocol CompactSerializer {
  var components: [JOSESwift.DataConvertible] { get }
  mutating func serialize<T>(_ object: T) where T : JOSESwift.DataConvertible
}
public struct JOSESerializer {
  public func serialize<T>(compact object: T) -> Swift.String where T : JOSESwift.CompactSerializable
}
public struct Payload : JOSESwift.DataConvertible {
  public init(_ payload: Foundation.Data)
  public func data() -> Foundation.Data
}
public struct JWSHeader {
  public init(algorithm: JOSESwift.SignatureAlgorithm)
  public init(parameters: [Swift.String : Any]) throws
}
extension JOSESwift.JWSHeader {
  public var algorithm: JOSESwift.SignatureAlgorithm? {
    get
  }
}
extension JOSESwift.JWSHeader : JOSESwift.CommonHeaderParameterSpace {
  public var jku: Foundation.URL? {
    get
    set
  }
  public var jwk: Swift.String? {
    get
    set
  }
  public var jwkTyped: JOSESwift.JWK? {
    get
    set
  }
  public var kid: Swift.String? {
    get
    set
  }
  public var x5u: Foundation.URL? {
    get
    set
  }
  public var x5c: [Swift.String]? {
    get
    set
  }
  public var x5t: Swift.String? {
    get
    set
  }
  public var x5tS256: Swift.String? {
    get
    set
  }
  public var typ: Swift.String? {
    get
    set
  }
  public var cty: Swift.String? {
    get
    set
  }
  public var crit: [Swift.String]? {
    get
    set
  }
}
extension JOSESwift.RSAPublicKey : Swift.Encodable {
  public func encode(to encoder: Swift.Encoder) throws
}
extension JOSESwift.RSAPublicKey : Swift.Decodable {
  public init(from decoder: Swift.Decoder) throws
}
extension JOSESwift.RSAPrivateKey : Swift.Encodable {
  public func encode(to encoder: Swift.Encoder) throws
}
extension JOSESwift.RSAPrivateKey : Swift.Decodable {
  public init(from decoder: Swift.Decoder) throws
}
public enum SignatureAlgorithm : Swift.String {
  case HS256
  case HS384
  case HS512
  case RS256
  case RS384
  case RS512
  @available(iOS 11, *)
  case PS256
  @available(iOS 11, *)
  case PS384
  @available(iOS 11, *)
  case PS512
  case ES256
  case ES384
  case ES512
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum KeyManagementAlgorithm : Swift.String, Swift.CaseIterable {
  case RSA1_5
  case RSAOAEP
  case RSAOAEP256
  case A128KW
  case A192KW
  case A256KW
  case direct
  public init?(rawValue: Swift.String)
  public typealias AllCases = [JOSESwift.KeyManagementAlgorithm]
  public typealias RawValue = Swift.String
  public static var allCases: [JOSESwift.KeyManagementAlgorithm] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
public enum ContentEncryptionAlgorithm : Swift.String {
  case A256CBCHS512
  case A128CBCHS256
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum HMACAlgorithm : Swift.String {
  case SHA512
  case SHA384
  case SHA256
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum JWKThumbprintAlgorithm : Swift.String {
  case SHA256
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum CompressionAlgorithm : Swift.String {
  case DEFLATE
  case NONE
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@available(*, deprecated, message: "Use `KeyManagementAlgorithm` instead")
public typealias AsymmetricKeyAlgorithm = JOSESwift.KeyManagementAlgorithm
@available(*, deprecated, message: "Use `ContentEncryptionAlgorithm` instead")
public typealias SymmetricKeyAlgorithm = JOSESwift.ContentEncryptionAlgorithm
public typealias SymmetricKeyComponents = (Foundation.Data)
public protocol ExpressibleAsSymmetricKeyComponents {
  static func representing(symmetricKeyComponents components: JOSESwift.SymmetricKeyComponents) throws -> Self
  func symmetricKeyComponents() throws -> JOSESwift.SymmetricKeyComponents
}
public struct SymmetricKey : JOSESwift.JWK {
  public let keyType: JOSESwift.JWKKeyType
  public let parameters: [Swift.String : Swift.String]
  public var requiredParameters: [Swift.String : Swift.String] {
    get
  }
  public let key: Swift.String
  public init(key: Foundation.Data, additionalParameters parameters: [Swift.String : Swift.String] = [:])
  public init(key: JOSESwift.ExpressibleAsSymmetricKeyComponents, additionalParameters parameters: [Swift.String : Swift.String] = [:]) throws
  public init(data: Foundation.Data) throws
  public func converted<T>(to type: T.Type) throws -> T where T : JOSESwift.ExpressibleAsSymmetricKeyComponents
  @available(iOS 11.0, *)
  public func withThumbprintAsKeyId(algorithm: JOSESwift.JWKThumbprintAlgorithm = .SHA256) throws -> JOSESwift.SymmetricKey
}
public protocol DataConvertible {
  init?(_ data: Foundation.Data)
  func data() -> Foundation.Data
}
public struct JWE {
  public let header: JOSESwift.JWEHeader
  public let encryptedKey: Foundation.Data
  public let initializationVector: Foundation.Data
  public let ciphertext: Foundation.Data
  public let authenticationTag: Foundation.Data
  public var compactSerializedString: Swift.String {
    get
  }
  public var compactSerializedData: Foundation.Data {
    get
  }
  public init<KeyType>(header: JOSESwift.JWEHeader, payload: JOSESwift.Payload, encrypter: JOSESwift.Encrypter<KeyType>) throws
  public init(compactSerialization: Swift.String) throws
  public init(compactSerialization: Foundation.Data) throws
  @available(*, deprecated, message: "Use `decrypt(using decrypter:)` instead")
  public func decrypt<KeyType>(with key: KeyType) throws -> JOSESwift.Payload
  public func decrypt(using decrypter: JOSESwift.Decrypter) throws -> JOSESwift.Payload
}
extension JOSESwift.JWE : JOSESwift.CompactSerializable {
  public func serialize(to serializer: inout JOSESwift.CompactSerializer)
}
extension JOSESwift.JWE : JOSESwift.CompactDeserializable {
  public static var componentCount: Swift.Int {
    get
  }
  public init(from deserializer: JOSESwift.CompactDeserializer) throws
}
public struct Signer<KeyType> {
  public init?(signingAlgorithm: JOSESwift.SignatureAlgorithm, key: KeyType)
}
extension JOSESwift.Signer {
  @available(*, deprecated, message: "Use `init?(signingAlgorithm: SignatureAlgorithm, key: KeyType)` instead")
  public init?(signingAlgorithm: JOSESwift.SignatureAlgorithm, privateKey: KeyType)
}
extension JOSESwift.SymmetricKey : Swift.Encodable {
  public func encode(to encoder: Swift.Encoder) throws
}
extension JOSESwift.SymmetricKey : Swift.Decodable {
  public init(from decoder: Swift.Decoder) throws
}
extension Foundation.Data : JOSESwift.ExpressibleAsSymmetricKeyComponents {
  public static func representing(symmetricKeyComponents components: JOSESwift.SymmetricKeyComponents) throws -> Foundation.Data
  public func symmetricKeyComponents() throws -> JOSESwift.SymmetricKeyComponents
}
public struct Verifier {
  public init?<KeyType>(verifyingAlgorithm: JOSESwift.SignatureAlgorithm, key: KeyType)
}
extension JOSESwift.Verifier {
  @available(*, deprecated, message: "Use `init?(verifyingAlgorithm: SignatureAlgorithm, key: KeyType)` instead")
  public init?<KeyType>(verifyingAlgorithm: JOSESwift.SignatureAlgorithm, publicKey: KeyType)
}
public enum JOSESwiftError : Swift.Error {
  case signingFailed(description: Swift.String)
  case verifyingFailed(description: Swift.String)
  case signatureInvalid
  case encryptingFailed(description: Swift.String)
  case decryptingFailed(description: Swift.String)
  case wrongDataEncoding(data: Foundation.Data)
  case invalidCompactSerializationComponentCount(count: Swift.Int)
  case componentNotValidBase64URL(component: Swift.String)
  case componentCouldNotBeInitializedFromData(data: Foundation.Data)
  case couldNotConstructJWK
  case modulusNotBase64URLUIntEncoded
  case exponentNotBase64URLUIntEncoded
  case privateExponentNotBase64URLUIntEncoded
  case symmetricKeyNotBase64URLEncoded
  case xNotBase64URLUIntEncoded
  case yNotBase64URLUIntEncoded
  case privateKeyNotBase64URLUIntEncoded
  case invalidCurveType
  case compressedCurvePointsUnsupported
  case invalidCurvePointOctetLength
  case localAuthenticationFailed(errorCode: Swift.Int)
  case compressionFailed
  case decompressionFailed
  case compressionAlgorithmNotSupported
  case rawDataMustBeGreaterThanZero
  case compressedDataMustBeGreaterThanZero
  case thumbprintSerialization
}
public protocol CommonHeaderParameterSpace {
  var jku: Foundation.URL? { get set }
  var jwk: Swift.String? { get set }
  var jwkTyped: JOSESwift.JWK? { get set }
  var kid: Swift.String? { get set }
  var x5u: Foundation.URL? { get set }
  var x5c: [Swift.String]? { get set }
  var x5t: Swift.String? { get set }
  var x5tS256: Swift.String? { get set }
  var typ: Swift.String? { get set }
  var cty: Swift.String? { get set }
  var crit: [Swift.String]? { get set }
}
public struct JWEHeader {
  public init(keyManagementAlgorithm: JOSESwift.KeyManagementAlgorithm, contentEncryptionAlgorithm: JOSESwift.ContentEncryptionAlgorithm)
  public init(parameters: [Swift.String : Any]) throws
}
extension JOSESwift.JWEHeader {
  public var keyManagementAlgorithm: JOSESwift.KeyManagementAlgorithm? {
    get
  }
  public var contentEncryptionAlgorithm: JOSESwift.ContentEncryptionAlgorithm? {
    get
  }
  public var compressionAlgorithm: JOSESwift.CompressionAlgorithm? {
    get
  }
  public var zip: Swift.String? {
    get
    set
  }
}
extension JOSESwift.JWEHeader : JOSESwift.CommonHeaderParameterSpace {
  public var jku: Foundation.URL? {
    get
    set
  }
  public var jwk: Swift.String? {
    get
    set
  }
  public var jwkTyped: JOSESwift.JWK? {
    get
    set
  }
  public var kid: Swift.String? {
    get
    set
  }
  public var x5u: Foundation.URL? {
    get
    set
  }
  public var x5c: [Swift.String]? {
    get
    set
  }
  public var x5t: Swift.String? {
    get
    set
  }
  public var x5tS256: Swift.String? {
    get
    set
  }
  public var typ: Swift.String? {
    get
    set
  }
  public var cty: Swift.String? {
    get
    set
  }
  public var crit: [Swift.String]? {
    get
    set
  }
}
extension JOSESwift.JWEHeader {
  @available(*, deprecated, message: "Use `JWEHeader.keyManagementAlgorithm` instead")
  public var algorithm: JOSESwift.AsymmetricKeyAlgorithm? {
    get
  }
  @available(*, deprecated, message: "Use `JWEHeader.contentEncryptionAlgorithm` instead")
  public var encryptionAlgorithm: JOSESwift.SymmetricKeyAlgorithm? {
    get
  }
  @available(*, deprecated, message: "Use `init(keyManagementAlgorithm:contentEncryptionAlgorithm` instead")
  public init(algorithm: JOSESwift.AsymmetricKeyAlgorithm, encryptionAlgorithm: JOSESwift.SymmetricKeyAlgorithm)
}
extension Foundation.Data {
  public init?(base64URLEncoded base64URLString: Swift.String)
  public init?(base64URLEncoded base64URLData: Foundation.Data)
  public func base64URLEncodedString() -> Swift.String
  public func base64URLEncodedData() -> Foundation.Data
}
extension Foundation.Data : JOSESwift.DataConvertible {
  public init(_ data: Foundation.Data)
  public func data() -> Foundation.Data
}
public enum JWKParameter : Swift.String, Swift.CodingKey {
  case keyType
  case keyUse
  case keyOperations
  case algorithm
  case keyIdentifier
  case X509URL
  case X509CertificateChain
  case X509CertificateSHA1Thumbprint
  case X509CertificateSHA256Thumbprint
  public init?(rawValue: Swift.String)
  public init?(stringValue: Swift.String)
  public init?(intValue: Swift.Int)
  public typealias RawValue = Swift.String
  public var intValue: Swift.Int? {
    get
  }
  public var rawValue: Swift.String {
    get
  }
  public var stringValue: Swift.String {
    get
  }
}
public enum RSAParameter : Swift.String, Swift.CodingKey {
  case modulus
  case exponent
  case privateExponent
  public init?(rawValue: Swift.String)
  public init?(stringValue: Swift.String)
  public init?(intValue: Swift.Int)
  public typealias RawValue = Swift.String
  public var intValue: Swift.Int? {
    get
  }
  public var rawValue: Swift.String {
    get
  }
  public var stringValue: Swift.String {
    get
  }
}
public enum SymmetricKeyParameter : Swift.String, Swift.CodingKey {
  case key
  public init?(rawValue: Swift.String)
  public init?(stringValue: Swift.String)
  public init?(intValue: Swift.Int)
  public typealias RawValue = Swift.String
  public var intValue: Swift.Int? {
    get
  }
  public var rawValue: Swift.String {
    get
  }
  public var stringValue: Swift.String {
    get
  }
}
public enum ECParameter : Swift.String, Swift.CodingKey {
  case curve
  case x
  case y
  case privateKey
  public init?(rawValue: Swift.String)
  public init?(stringValue: Swift.String)
  public init?(intValue: Swift.Int)
  public typealias RawValue = Swift.String
  public var intValue: Swift.Int? {
    get
  }
  public var rawValue: Swift.String {
    get
  }
  public var stringValue: Swift.String {
    get
  }
}
extension Foundation.Data : JOSESwift.ExpressibleAsRSAPublicKeyComponents {
  public static func representing(rsaPublicKeyComponents components: JOSESwift.RSAPublicKeyComponents) throws -> Foundation.Data
  public func rsaPublicKeyComponents() throws -> JOSESwift.RSAPublicKeyComponents
}
public struct JWS {
  public let header: JOSESwift.JWSHeader
  public let payload: JOSESwift.Payload
  public let signature: Foundation.Data
  public var compactSerializedString: Swift.String {
    get
  }
  public var compactSerializedData: Foundation.Data {
    get
  }
  public init<KeyType>(header: JOSESwift.JWSHeader, payload: JOSESwift.Payload, signer: JOSESwift.Signer<KeyType>) throws
  public init(compactSerialization: Swift.String) throws
  public init(compactSerialization: Foundation.Data) throws
  @available(*, deprecated, message: "Use `isValid(for verifier:)` instead")
  public func isValid<KeyType>(for publicKey: KeyType) -> Swift.Bool
  @available(*, deprecated, message: "Use `validate(using verifier:)` instead")
  public func validate<KeyType>(with publicKey: KeyType) throws -> JOSESwift.JWS
  public func validate(using verifier: JOSESwift.Verifier) throws -> JOSESwift.JWS
  public func isValid(for verifier: JOSESwift.Verifier) -> Swift.Bool
}
extension JOSESwift.JWS : JOSESwift.CompactSerializable {
  public func serialize(to serializer: inout JOSESwift.CompactSerializer)
}
extension JOSESwift.JWS : JOSESwift.CompactDeserializable {
  public static var componentCount: Swift.Int {
    get
  }
  public init(from deserializer: JOSESwift.CompactDeserializer) throws
}
public typealias ECPublicKeyComponents = (crv: Swift.String, x: Foundation.Data, y: Foundation.Data)
public typealias ECPrivateKeyComponents = (crv: Swift.String, x: Foundation.Data, y: Foundation.Data, d: Foundation.Data)
public protocol ExpressibleAsECPublicKeyComponents {
  static func representing(ecPublicKeyComponents components: JOSESwift.ECPublicKeyComponents) throws -> Self
  func ecPublicKeyComponents() throws -> JOSESwift.ECPublicKeyComponents
}
public protocol ExpressibleAsECPrivateKeyComponents {
  static func representing(ecPrivateKeyComponents components: JOSESwift.ECPrivateKeyComponents) throws -> Self
  func ecPrivateKeyComponents() throws -> JOSESwift.ECPrivateKeyComponents
}
public struct ECPublicKey : JOSESwift.JWK {
  public let keyType: JOSESwift.JWKKeyType
  public let parameters: [Swift.String : Swift.String]
  public var requiredParameters: [Swift.String : Swift.String] {
    get
  }
  public let crv: JOSESwift.ECCurveType
  public let x: Swift.String
  public let y: Swift.String
  public init(crv: JOSESwift.ECCurveType, x: Swift.String, y: Swift.String, additionalParameters parameters: [Swift.String : Swift.String] = [:])
  public init(publicKey: JOSESwift.ExpressibleAsECPublicKeyComponents, additionalParameters parameters: [Swift.String : Swift.String] = [:]) throws
  public init(data: Foundation.Data) throws
  public func converted<T>(to type: T.Type) throws -> T where T : JOSESwift.ExpressibleAsECPublicKeyComponents
  @available(iOS 11.0, *)
  public func withThumbprintAsKeyId(algorithm: JOSESwift.JWKThumbprintAlgorithm = .SHA256) throws -> JOSESwift.ECPublicKey
}
public struct ECPrivateKey : JOSESwift.JWK {
  public let keyType: JOSESwift.JWKKeyType
  public let parameters: [Swift.String : Swift.String]
  public var requiredParameters: [Swift.String : Swift.String] {
    get
  }
  public let crv: JOSESwift.ECCurveType
  public let x: Swift.String
  public let y: Swift.String
  public let privateKey: Swift.String
  public init(crv: Swift.String, x: Swift.String, y: Swift.String, privateKey: Swift.String, additionalParameters parameters: [Swift.String : Swift.String] = [:]) throws
  public init(privateKey: JOSESwift.ExpressibleAsECPrivateKeyComponents, additionalParameters parameters: [Swift.String : Swift.String] = [:]) throws
  public init(data: Foundation.Data) throws
  public func converted<T>(to type: T.Type) throws -> T where T : JOSESwift.ExpressibleAsECPrivateKeyComponents
  @available(iOS 11.0, *)
  public func withThumbprintAsKeyId(algorithm: JOSESwift.JWKThumbprintAlgorithm = .SHA256) throws -> JOSESwift.ECPrivateKey
}
public typealias ECKeyPair = JOSESwift.ECPrivateKey
extension JOSESwift.ECPublicKey : Swift.Encodable {
  public func encode(to encoder: Swift.Encoder) throws
}
extension JOSESwift.ECPublicKey : Swift.Decodable {
  public init(from decoder: Swift.Decoder) throws
}
extension JOSESwift.ECPrivateKey : Swift.Encodable {
  public func encode(to encoder: Swift.Encoder) throws
}
extension JOSESwift.ECPrivateKey : Swift.Decodable {
  public init(from decoder: Swift.Decoder) throws
}
public enum ECCurveType : Swift.String, Swift.Codable {
  case P256
  case P384
  case P521
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum ECCompression : Swift.UInt8 {
  case CompressedYEven
  case CompressedYOdd
  case Uncompressed
  case HybridYEven
  case HybridYOdd
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
extension Security.SecKey : JOSESwift.ExpressibleAsECPublicKeyComponents {
  public static func representing(ecPublicKeyComponents components: JOSESwift.ECPublicKeyComponents) throws -> Self
  public func ecPublicKeyComponents() throws -> JOSESwift.ECPublicKeyComponents
}
extension Foundation.Data : JOSESwift.ExpressibleAsECPublicKeyComponents {
  public static func representing(ecPublicKeyComponents components: JOSESwift.ECPublicKeyComponents) throws -> Foundation.Data
  public func ecPublicKeyComponents() throws -> JOSESwift.ECPublicKeyComponents
}
extension Foundation.Data : JOSESwift.ExpressibleAsECPrivateKeyComponents {
  public static func representing(ecPrivateKeyComponents components: JOSESwift.ECPrivateKeyComponents) throws -> Foundation.Data
  public func ecPrivateKeyComponents() throws -> JOSESwift.ECPrivateKeyComponents
}
extension Security.SecKey : JOSESwift.ExpressibleAsECPrivateKeyComponents {
  public static func representing(ecPrivateKeyComponents components: JOSESwift.ECPrivateKeyComponents) throws -> Self
  public func ecPrivateKeyComponents() throws -> JOSESwift.ECPrivateKeyComponents
}
extension JOSESwift.JWKKeyType : Swift.Equatable {}
extension JOSESwift.JWKKeyType : Swift.Hashable {}
extension JOSESwift.JWKKeyType : Swift.RawRepresentable {}
extension JOSESwift.SignatureAlgorithm : Swift.Equatable {}
extension JOSESwift.SignatureAlgorithm : Swift.Hashable {}
extension JOSESwift.SignatureAlgorithm : Swift.RawRepresentable {}
extension JOSESwift.KeyManagementAlgorithm : Swift.Equatable {}
extension JOSESwift.KeyManagementAlgorithm : Swift.Hashable {}
extension JOSESwift.KeyManagementAlgorithm : Swift.RawRepresentable {}
extension JOSESwift.HMACAlgorithm : Swift.Equatable {}
extension JOSESwift.HMACAlgorithm : Swift.Hashable {}
extension JOSESwift.HMACAlgorithm : Swift.RawRepresentable {}
extension JOSESwift.ContentEncryptionAlgorithm : Swift.Equatable {}
extension JOSESwift.ContentEncryptionAlgorithm : Swift.Hashable {}
extension JOSESwift.ContentEncryptionAlgorithm : Swift.RawRepresentable {}
extension JOSESwift.JWSHeader : JOSESwift.DataConvertible {}
extension JOSESwift.JWKThumbprintAlgorithm : Swift.Equatable {}
extension JOSESwift.JWKThumbprintAlgorithm : Swift.Hashable {}
extension JOSESwift.JWKThumbprintAlgorithm : Swift.RawRepresentable {}
extension JOSESwift.CompressionAlgorithm : Swift.Equatable {}
extension JOSESwift.CompressionAlgorithm : Swift.Hashable {}
extension JOSESwift.CompressionAlgorithm : Swift.RawRepresentable {}
extension JOSESwift.JWEHeader : JOSESwift.DataConvertible {}
extension JOSESwift.JWKParameter : Swift.Equatable {}
extension JOSESwift.JWKParameter : Swift.Hashable {}
extension JOSESwift.JWKParameter : Swift.RawRepresentable {}
extension JOSESwift.RSAParameter : Swift.Equatable {}
extension JOSESwift.RSAParameter : Swift.Hashable {}
extension JOSESwift.RSAParameter : Swift.RawRepresentable {}
extension JOSESwift.SymmetricKeyParameter : Swift.Equatable {}
extension JOSESwift.SymmetricKeyParameter : Swift.Hashable {}
extension JOSESwift.SymmetricKeyParameter : Swift.RawRepresentable {}
extension JOSESwift.ECParameter : Swift.Equatable {}
extension JOSESwift.ECParameter : Swift.Hashable {}
extension JOSESwift.ECParameter : Swift.RawRepresentable {}
extension JOSESwift.ECCurveType : Swift.Equatable {}
extension JOSESwift.ECCurveType : Swift.Hashable {}
extension JOSESwift.ECCurveType : Swift.RawRepresentable {}
extension JOSESwift.ECCompression : Swift.Equatable {}
extension JOSESwift.ECCompression : Swift.Hashable {}
extension JOSESwift.ECCompression : Swift.RawRepresentable {}
